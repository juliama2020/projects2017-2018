#Calculator
#You will recieve marks based 
#on functionality of your calculator.
#REMEMBER: invalid inputs are ignored.


#Have fun!


#TODO
#main procedure, that will call your calculator

#calculator procedure, that will deal with the input
	#2 cases you must consider:

	#  Number Operation Number <enter is pressed>
	#  Must display the result on the screen

	#  Operation Number <enter is pressed>
	#  uses prior result as the first number
	#  Returns the new result to the display


#driver for getting input from MIPS keyboar


#driver for putting output to MIPS display
.data

introMsg1: .asciiz "Calculator for MIPS\n"
introMsg2: .asciiz "press 'c' for clear and 'q' to quit\n"
result: .asciiz "Result: "
newline: .asciiz "\n"
buffer: .space 100
negative: .asciiz "-"
invalid: .asciiz "Invalid expression, cannot divide by 0.\n"
exitMsg: .asciiz "\nYou have exited from MIPS Calculator.\n"

.text 

main:	la $a0, introMsg1		# print introduction messages
	jal printstr
	la $a0, introMsg2
	jal printstr
	
	move $a0, $zero		
	move $s6, $zero		# tells if there has been a previous calculation before
				# $s6 = 0 if there has not been, 1 if there has
	
newCalc:				# s0 = last result
	move $s1, $zero		# s1 = first number
	move $s2, $zero		# s2 = operation
	move $s3, $zero		# s3 = second number
	move $s4, $zero		# length of current number
	la $s5, buffer		# buffer for storing a number with mutiple digits
	
	
	move $s7, $zero		# $s7 will determine what we're waiting for
				# if $s7 = 0, waiting for digit or operation (first input)
				# if $s7 = 1, waiting for ' ' (after operation)
				# if $s7 = 2, done with operation - begin evaluating :D
				# if $s7 = 3, waiting for operation
				# if $s7 = 4, waiting for a digit (second digit) or "-" to signify negative input
				# if $s7 = 5, waiting for more digits or "enter" - end operation
				# if $s7 = 6, waiting for ' ' or digit (after first number)	
				# if $s7 = 9, then clear calculator - newCalculation
				# if $s7 = 10, waiting for digit or ' ' => checking whether negative first int
				# if $s7 = 11, waiting for the first digit of the second integer input
			

				
				
start:	jal getInput		# reading and writing using MMIO
	beq $s7, 9, newCalc
	bne $s7, 2, start
	
	bne $s2, 47, evaluate		# check if dividing by 0
	bne $s3, 0, evaluate
	
	la $a0, invalid	 	# if so, say it's an invalid expression and start new calculation
	jal printstr
	j newCalc

# NOTE: assumed there will be no overflow
evaluate:	move $t3, $zero
	move $t4, $zero
	move $t9, $zero
	beq $s2, 43, addOp		# if ASCII = 43, then character is +
	beq $s2, 45, subOp		# if ASCII = 45, then character is -
	beq $s2, 42, multOp		# if ASCII = 42, then character is *
	beq $s2, 47, makePositive1	# if ASCII = 47, then character is /
		
	
addOp:	add $s0, $s1, $s3		# add numbers, save in $s0, and copy to $t8
	move $t8, $s0
	j checkNeg

subOp:	sub $s0, $s1, $s3		# subtract numbers, save in $s0, and copy to $t8
	move $t8, $s0
	j checkNeg

multOp:	mul $s0, $s1, $s3		# multiply numbers, save in $s0 and copy to $t8
	move $t8, $s0
	j checkNeg

makePositive1:			# make the digits positive, keep track of negatives
	bgtz $s1, makePositive2
	addi $t9, $zero, 1
	sub $s1, $zero, $s1

makePositive2:
	bgtz $s3, divOp
	addi $t9, $t9, -1
	sub $s3, $zero, $s3

divOp: 
	div $s1, $s3
	mflo $s0			# quotient in $s0
	move $t8, $s0		# save a copy of integer into $t8 (always positive for printing)
	beqz $t9, noNeg		# check whether to negate $s0
	sub $s0, $zero, $s0	
noNeg:	mfhi $t3			# remainder in $t3
	beqz $t3, checkZero		# if no remainder, done
	#beqz $s0, noRound
	#addi $s0, $s0, 1		# else round up quotient
noRound:	mul $t3, $t3, 10		# remainder*10
	div $t3, $s3		# remainder*10/divisor
	mflo $t3			# first digit after decimal point in $t3	
	mfhi $t4			# remainder in $t4
	beqz $t4, checkZero		# if no remainder, go print
	mul $t4, $t4, 10
	div $t4, $s3		# remainder*10/divisor
	mflo $t4			# second digit after decimal point in $t4
	mfhi $t5			# remainder in $t5
	mul $t5, $t5, 10
	div $t5, $s3		
	mflo $t5			# third digit after decimal point in $t5
	blt $t5, 5, checkZero 		# don't round second decimal point if $t5  < 5
	beq $t4, 9, round2
	addi $t4, $t4, 1		# else round up
	j checkZero

round2:	beq $t3, 9, round3		# rounding from .095 requires incrementing first
	move $t4, $zero		# digit after decimal
	addi $t3, $t3, 1
	j checkZero

round3: 	addi $t8, $t8, 1		# rounding up from .99 requires incrementing first digit
	move $t3, $zero
	move $t4, $zero

checkZero:	bnez $s0, roundUp		# if answer is 0.00, get rid of negative
	bnez $t3, roundUp
	bnez $t4, roundUp
	move $t9, $zero
	j roundUp

checkNeg:	bgez $s0, printResult
	addi $t9, $zero, 1		# t9 = 1 => negative output
	sub $t8, $zero, $t8		# make answer positive
	
roundUp:	bnez $t9, printResult		# check for rounding up when dividing
	addi $s0, $s0, 1
printResult:
	la $a0, result
	jal printstr		# print "Result: "
		
	addi $t2, $zero, 10		# let $t2 = 10
	move $s4, $zero		# let $s4 be a digit counter
	la $s5, buffer
	
	beqz $t9, resultLoop		# if not negative, don't print -
	la $a0, negative
	jal printstr
	
	
resultLoop:	div $t8, $t2		# divide quotient by 10
	mfhi $t5			# put remainder into $t5 (smallest digit)
	mflo $t8			# put quotient into $t8
	sb $t5, ($s5)		# store into buffer
	addi $s4, $s4, 1		# increment digit counter
	addi $s5, $s5, 1		# increment buffer pointer
	bnez $t8, resultLoop
	
	addi $s5, $s5, -1		# pointer is now pointing to most significant digit of answer
intLoop:	lb $v0, ($s5)		# get digit from buffer
	addi $v0, $v0, 48		# convert int back to ASCII
	jal printInput		# print digit
	addi $s5, $s5, -1
	addi $s4, $s4, -1
	bnez $s4, intLoop
	
	addi $v0, $zero, 46		# 46 is ASCII for "."
	jal printInput
	
	addi $v0, $t3, 48		# change first digit after decimal point to ASCII
	jal printInput		# print first digit
	
	addi $v0, $t4, 48		# change second digit after decimal point to ASCII
	jal printInput		# print second digit
	
	la $a0, newline		# print newline
	jal printstr
	
	addi $s6, $zero, 1		# succesfully evaluated an expression
	move $t9, $zero		# reinitialize to not negative
	move $a0, $zero
	j newCalc
	
	
	
	

# method to print a str, address in $a0

printstr:	lui $t0, 0xffff		#ffff0000
	lbu $a1, ($a0)
printloop: 	sw $a1, 12($t0)		 #data
	addi $a0, $a0, 1
	lbu $a1, ($a0)
	bne $a1, 0, printloop
	jr $ra
	
	
getInput:  	lui $t0, 0xffff 		#ffff0000
Loop1:	lw $t1, 0($t0)		#control
	andi $t1,$t1,0x0001
	beq $t1,$zero,Loop1
	
	lw $v0, 4($t0) 		#data
	
	beq $v0, 113, quit		# if ASCII = 113, then character is q => quit program
	beq $v0, 99, clear		# if ASCII = 99, then character is c => clear calculator
	
	bgt $v0, 57, Loop1		# if ASCII>57, data entered not a number, space or operation
	bgt $v0, 47, nmbrInput		# if 47<ASCII<57, data entered is a number
	
	beq $v0, 43, operand		# if ASCII = 43, then character is +
	beq $v0, 45, subOrNeg		# if ASCII = 45, then character is -
	beq $v0, 42, operand		# if ASCII = 42, then character is *
	beq $v0, 47, operand		# if ASCII = 47, then character is /
	beq $v0, 32, space		# if ASCII = 32, then character is ' '
	beq $v0, 10, getSecond		# if ASCII = 10, then the enter key was pressed
	
	j Loop1

printInput:	move $a0, $v0
	lui $t0, 0xffff		#ffff0000
Loop2: 	lw $t1, 8($t0) 		#control
	andi $t1,$t1,0x0001
	beq $t1,$zero,Loop2
	sw $a0, 12($t0)		 #data	
	jr $ra

nmbrInput:	beq $s7, 10, case1		# if $s7 = 10, then the first valid input is a negative digit
	beq $s7, 0, case1		# if $s7 = 0, then the first valid input is a positive digit
	beq $s7, 11, secondInt
	beq $s7, 4, secondInt		# if $s7 = 4, then waiting for second integer
	blt $s7, 5, Loop1		# if $s7 is not 5 or 6, then invalid input
	bgt $s7, 6, Loop1
	addi $s4, $s4, 1		# increment digit counter
	sb $v0, ($s5)		# put next digit into buffer
	addi $s5, $s5, 1		# increment pointer
	j printInput

subOrNeg:	beqz $s7, case
	beq $s7, 4, negSecond
	bne $s7, 3, Loop1
	move $s2, $v0
	addi $s7, $zero, 1
	j printInput
	
negSecond:	addi $t9, $zero, 1
	addi $s7, $zero, 11
	j printInput
	
secondInt:	sb $v0, ($s5)
	addi $s4, $zero, 1
	addi $s5, $s5, 1
	addi $s7, $zero, 5		# change to waiting for a digit or an "enter"
	j printInput
	

operand:	beq $s7, 0, case2		# if $s7 = 10, then first valid input is an operand
	bne $s7, 3, Loop1		# if $s7!=3 (not waiting for an operation), go back to waiting for valid input
	move $s2, $v0		# else put operation into $s2
	addi $s7, $zero, 1		# change to waiting for a ' '
	j printInput		# and pint the input
	
space:	beq $s7, 6, getFirst		# if got a ' ' after first int, then finished first int
	beq $s7, 10, case2Neg
	bne $s7, 1, Loop1		# if $s7!=1, then not waiting for a ' ' so go back to waiting for valid input
	addi $s7, $zero, 4		# change to waiting for a second integer or negative input
	j printInput

getFirst:	addi $s7, $zero, 3		# change to waiting for an operation
	lb $t0, -1($s5)		# get last digit from the buffer
	addi $t0, $t0, -48		# change from ascii to integer
	add $s1, $zero, $t0		# get ones digit into first number
	addi $t1, $zero, 10		# begin the multipying thing
	addi $s5, $s5, -2		# go back one digit in buffer
	addi $s4, $s4, -1		# decrease counter
	beqz $s4, checkNeg1
	
loopNumb1:  lb $t0, ($s5)		# get next digit from buffer
	addi $t0, $t0, -48		# change from ascii to integer
	mul $t0, $t0, $t1		# get to proper place in number
	add $s1, $s1, $t0		# get digit into number
	mul $t1, $t1, 10		# contine multipying thing
	addi $s5, $s5, -1		# go back one digit in buffer
	addi $s4, $s4, -1		# decrease counter
	beqz $s4, checkNeg1
	j loopNumb1

getSecond:	bne $s7, 5, Loop1
	addi $s7, $zero, 2		# change to go for evaluation
	lb $t0, -1($s5)		# get last digit from the buffer
	addi $t0, $t0, -48		# change from ascii to integer
	add $s3, $zero, $t0		# put ones digit into first number
	addi $t1, $zero, 10		# begin the multipying thing
	addi $s5, $s5, -2		# go back one digit in buffer
	addi $s4, $s4, -1		# decrease counter
	beqz $s4, checkNeg2
	
loopNumb2: 	lb $t0, ($s5)		# get next digit from buffer
	addi $t0, $t0, -48		# change from ascii to integer
	mul $t0, $t0, $t1		# get to proper place in number
	add $s3, $s3, $t0		# get digit into number
	mul $t1, $t1, 10		# contine multipying thing
	addi $s5, $s5, -1		# go back one digit in buffer
	addi $s4, $s4, -1		# decrease counter
	beqz $s4, checkNeg2
	j loopNumb2
	
checkNeg1: 	beq $t9, $zero, clearBuff	# if not negative, clear buffer
	sub $s1, $zero, $s1		# else, first neggate the int value
	move $t9, $zero
	j clearBuff
	
checkNeg2: 	beq $t9, $zero, clearBuff	# if not negative, clear buffer
	sub $s3, $zero, $s3		# else, first negate the int value
	move $t9, $zero
	j clearBuff
	
clearBuff:  move $t7, $zero		# loop to clear buffer - set to null
	la $t6, buffer
	la $s5, buffer
	move $s4, $zero
loopclear:	la $zero, ($t6)
	addi $t7, $t7, 1
	addi $t6, $t6, 1
	blt $t7, 100, loopclear
	j printInput
	
case:	addi $s7, $zero, 10		# change to waiting for digit or ' ' => see if first number is negative
	move $s2, $v0		# put operation into $s2 just in case
	j printInput

case1:	sb $v0, ($s5)		# put first digit into buffer
	addi $s4, $zero, 1		# begin counter (of digits) at 1
	addi $s5, $s5, 1		# increment pointer
	addi $s7, $zero, 6		# change to waiting for ' ' or a digit
	bne $s2, 45, printInput		# first integer is not negative
	move $s2, $zero		# take out operation
	addi $t9, $zero, 1		# $t9 = 1 => integer is negative
	j printInput

case2Neg:	beqz $s6, Loop1		# if there has not been a previous operation, then invalid input
	move $s1, $s0		# else, the first number is the result from the previous operation
	addi $v0, $zero, 32		# put operation into $s2 to print
	addi $s7, $zero, 4		# change to waiting for a number or "-"
	j printInput
	
case2: 	beqz $s6, Loop1		# if not a "-", then wait for a ' ' instead of a digit
	move $s1, $s0
	move $s2, $v0
	addi $s7, $zero, 1
	j printInput

clear:				# print a newline and start a new calculation
	addi $s7, $zero, 9
	addi $v0, $zero, 10
	j printInput
	

quit:	la $a0, exitMsg		# print exit message and exit
	jal printstr

	li $v0, 10
	syscall
