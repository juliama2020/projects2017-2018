import java.util.*;
import java.io.*;


class Sudoku
{
    /* SIZE is the size parameter of the Sudoku puzzle, and N is the square of the size.  For 
     * a standard Sudoku puzzle, SIZE is 3 and N is 9. */
    int SIZE, N;

    /* The grid contains all the numbers in the Sudoku puzzle.  Numbers which have
     * not yet been revealed are stored as 0. */
    int Grid[][];


    /* The solve() method should remove all the unknown characters ('x') in the Grid
     * and replace them with the numbers from 1-9 that satisfy the Sudoku puzzle. */
    public void solve()
    {
        /* INSERT YOUR CODE HERE */
      ArrayList<ArrayList<int[]>> empty = emptySpaces();
      ArrayList<ArrayList<Integer>> available = availableSpaces();
      permute(empty, available);
    }
    
     
  //Creates boolean[][] describing the numbers in the row of space of interest.
    private boolean[][] row(){
      boolean [][] row = new boolean[N][N];
      for(int i=0; i<N; i++){
        for(int j=0; j<N; j++){
          if(Grid[i][j]!= 0){
            row[i][Grid[i][j] - 1] = true;
          }
        }
      }
      return row;
    }
    
  //Creates boolean[][] describing the numbers in the column of space of interest.
    private boolean[][] column(){
      boolean [][] column = new boolean[N][N];
      for(int i=0; i<N; i++){
        for(int j=0; j<N; j++){
          if(Grid[i][j]!=0){
            column[j][Grid[i][j]-1]=true;
          }
        }
      }
      return column;      
    }

   //Permutes the rows and columns of the sudoku board to solve.
    private void permute(ArrayList<ArrayList<int[]>> empty, ArrayList<ArrayList<Integer>> a){
      boolean[][] rows = row();
      boolean[][] columns = column();
      permute(rows, columns, empty, a, 0, 0, a.get(0).size()-1);
    }
   
  //Fills in the rows and columns of the sudoku board - checks if the board is still valid.
    private boolean fillInSquare(boolean[][] rows, boolean[][] columns, ArrayList<int[]> empty, ArrayList<Integer> a){
      for(int i = 0; i < empty.size(); i++){
        if(validBoard(rows, columns, empty.get(i)[0], empty.get(i)[1], a.get(i))==false){
          return false;
        }
        Grid[empty.get(i)[0]][empty.get(i)[1]] = a.get(i);
        rows[empty.get(i)[0]][a.get(i) - 1] = true;
        columns[empty.get(i)[1]][a.get(i) - 1] = true;
        }
      return true;
    }
    
  //Checks if the partial sudoku board is still valid.
    private boolean validBoard(boolean[][] rows, boolean[][] columns, int i, int j, int attempt){
      boolean b = !(rows[i][attempt-1] || columns[j][attempt-1]);
      return b;
    }
    
  //Permutes the different rows and columns to find the values for each square.
    private boolean permute(boolean[][] rows, boolean[][] columns, ArrayList<ArrayList<int[]>> empty,
                            ArrayList<ArrayList<Integer>> a, int square, int i, int n) {
      int j;
      if(i>=n){
        if(fillInSquare(rows, columns, empty.get(square), a.get(square))==true){
          if((square+1)==N){
            return true;
          }
          if(permute(rows, columns, empty, a, square + 1, 0, a.get(square + 1).size() - 1)==true){
            return true;
          }
        }
        gridOfZeroes(rows, columns, empty.get(square));
        return false;
      }
      else{
        for(j=i; j<=n; j++){
          if((validBoard(rows, columns, empty.get(square).get(i)[0], empty.get(square).get(i)[1], a.get(square).get(j)))==true){
            swap(a.get(square), i, j);
            if(permute(rows, columns, empty, a, square, i + 1, n)==true){
              return true;
            }
          //This is to backtrack as necessary.
            swap(a.get(square), i, j);
          }
        }
      }
      return false;
    }
    
  //Creates a grid of zeroes.    
    private void gridOfZeroes(boolean[][] rows, boolean[][] columns, ArrayList<int[]> empty){
      for(int i=0; i<empty.size(); i++){
        int row=empty.get(i)[0];
        int column=empty.get(i)[1];
        if(Grid[row][column]!=0){
          rows[row][Grid[row][column] - 1] = false;
          columns[column][Grid[row][column] - 1] = false;
          Grid[row][column] = 0;
        }
      }
    }
    
   //Swaps the values.   
    private void swap(ArrayList<Integer> m, int i, int j){
      m.set(i, m.set(j, m.get(i)));
    }
 
   //Creates an ArrayList of the current empty spaces of the sudoku board.
    private ArrayList<ArrayList<int[]>> emptySpaces(){
      ArrayList<ArrayList<int[]>> empty = new ArrayList<ArrayList<int[]>>();
      for(int i = 0; i < N; i++)
        empty.add(findEmpty(i));
      return empty;
    }
   
    
  //Creates an ArrayList of empty spaces of the sudoku board.
    private ArrayList<int[]> findEmpty(int c){
      int row = c/SIZE;
      int column = c%SIZE;
      ArrayList<int[]> empty = new ArrayList<int[]>();
      for(int i = row*SIZE; i<row*SIZE + SIZE; i++)
        for(int j = column*SIZE; j<column*SIZE + SIZE; j++)
        if(Grid[i][j] == 0){
        empty.add(new int[] {i,j});
      }
      return empty;
    }
    
  //Creates an ArrayList of available spaces of the sudoku board.
    private ArrayList<ArrayList<Integer>> availableSpaces(){
      ArrayList<ArrayList<Integer>> availableSpaces = new ArrayList<ArrayList<Integer>>(N);
      Integer[] numbers = new Integer[N];
      for(int i = 0; i<N; i++)
        numbers[i] = i+1;
      for(int i=0; i<N; i++){
        availableSpaces.add(findAvailable(i, numbers));
      }
      return availableSpaces;
    }
    
  //Creates an ArrayList of current available digits of the sudoku board.
    private ArrayList<Integer> findAvailable(int c, Integer[] numbers){
      int row = c/SIZE;
      int column = c%SIZE;
      ArrayList<Integer> availableSpaces = new ArrayList<Integer>(Arrays.asList(numbers));
      for(int i=row*SIZE; i<(row*SIZE + SIZE); i++){
        for(int j=column*SIZE; j<(column*SIZE+SIZE); j++){
          if(Grid[i][j]!=0){
            availableSpaces.remove(Integer.valueOf(Grid[i][j]));
          }
        }
      }
      return availableSpaces;
    } 
    
    

    /*****************************************************************************/
    /* NOTE: YOU SHOULD NOT HAVE TO MODIFY ANY OF THE FUNCTIONS BELOW THIS LINE. */
    /*****************************************************************************/
 
    /* Default constructor.  This will initialize all positions to the default 0
     * value.  Use the read() function to load the Sudoku puzzle from a file or
     * the standard input. */
    public Sudoku( int size )
    {
        SIZE = size;
        N = size*size;

        Grid = new int[N][N];
        for( int i = 0; i < N; i++ ) 
            for( int j = 0; j < N; j++ ) 
                Grid[i][j] = 0;
    }


    /* readInteger is a helper function for the reading of the input file.  It reads
     * words until it finds one that represents an integer. For convenience, it will also
     * recognize the string "x" as equivalent to "0". */
    static int readInteger( InputStream in ) throws Exception
    {
        int result = 0;
        boolean success = false;

        while( !success ) {
            String word = readWord( in );

            try {
                result = Integer.parseInt( word );
                success = true;
            } catch( Exception e ) {
                // Convert 'x' words into 0's
                if( word.compareTo("x") == 0 ) {
                    result = 0;
                    success = true;
                }
                // Ignore all other words that are not integers
            }
        }

        return result;
    }


    /* readWord is a helper function that reads a word separated by white space. */
    static String readWord( InputStream in ) throws Exception
    {
        StringBuffer result = new StringBuffer();
        int currentChar = in.read();
 String whiteSpace = " \t\r\n";
        // Ignore any leading white space
        while( whiteSpace.indexOf(currentChar) > -1 ) {
            currentChar = in.read();
        }

        // Read all characters until you reach white space
        while( whiteSpace.indexOf(currentChar) == -1 ) {
            result.append( (char) currentChar );
            currentChar = in.read();
        }
        return result.toString();
    }


    /* This function reads a Sudoku puzzle from the input stream in.  The Sudoku
     * grid is filled in one row at at time, from left to right.  All non-valid
     * characters are ignored by this function and may be used in the Sudoku file
     * to increase its legibility. */
    public void read( InputStream in ) throws Exception
    {
        for( int i = 0; i < N; i++ ) {
            for( int j = 0; j < N; j++ ) {
                Grid[i][j] = readInteger( in );
            }
        }
    }


    /* Helper function for the printing of Sudoku puzzle.  This function will print
     * out text, preceded by enough ' ' characters to make sure that the printint out
     * takes at least width characters.  */
    void printFixedWidth( String text, int width )
    {
        for( int i = 0; i < width - text.length(); i++ )
            System.out.print( " " );
        System.out.print( text );
    }


    /* The print() function outputs the Sudoku grid to the standard output, using
     * a bit of extra formatting to make the result clearly readable. */
    public void print()
    {
        // Compute the number of digits necessary to print out each number in the Sudoku puzzle
        int digits = (int) Math.floor(Math.log(N) / Math.log(10)) + 1;

        // Create a dashed line to separate the boxes 
        int lineLength = (digits + 1) * N + 2 * SIZE - 3;
        StringBuffer line = new StringBuffer();
        for( int lineInit = 0; lineInit < lineLength; lineInit++ )
            line.append('-');

        // Go through the Grid, printing out its values separated by spaces
        for( int i = 0; i < N; i++ ) {
            for( int j = 0; j < N; j++ ) {
                printFixedWidth( String.valueOf( Grid[i][j] ), digits );
                // Print the vertical lines between boxes 
                if( (j < N-1) && ((j+1) % SIZE == 0) )
                    System.out.print( " |" );
                System.out.print( " " );
            }
            System.out.println();

            // Print the horizontal line between boxes
            if( (i < N-1) && ((i+1) % SIZE == 0) )
                System.out.println( line.toString() );
        }
    }


    /* The main function reads in a Sudoku puzzle from the standard input, 
     * unless a file name is provided as a run-time argument, in which case the
     * Sudoku puzzle is loaded from that file.  It then solves the puzzle, and
     * outputs the completed puzzle to the standard output. */
    public static void main( String args[] ) throws Exception
    {
        InputStream in;
        if( args.length > 0 ) 
            in = new FileInputStream( args[0] );
        else
            in = System.in;

        // The first number in all Sudoku files must represent the size of the puzzle.  See
        // the example files for the file format.
        int puzzleSize = readInteger( in );
        if( puzzleSize > 100 || puzzleSize < 1 ) {
            System.out.println("Error: The Sudoku puzzle size must be between 1 and 100.");
            System.exit(-1);
        }

        Sudoku s = new Sudoku( puzzleSize );

        // read the rest of the Sudoku puzzle
        s.read( in );

        // Solve the puzzle.  We don't currently check to verify that the puzzle can be
        // successfully completed.  You may add that check if you want to, but it is not
        // necessary.
        s.solve();

        // Print out the (hopefully completed!) puzzle
        s.print();
    }
}
